# prepare the grid and the cell for ggplot
grid.poly.gg = tidy(grid.poly)
cell.poly.gg = tidy(cell.poly)
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_classic() +
geom_polygon(data=grid.poly.gg, aes(y=lat, x=long, group=group),
colour="grey", fill=NA) +
geom_polygon(data=cell.poly.gg, aes(y=lat, x=long, group=group),
colour="black", fill=NA) +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
spat.plot
}
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
# comment
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
plot.sim.com.grid <- function(S.pool, N.pool, spat.agg, evenness, resolution, cell.id){
set.seed(229356)
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool, sigma=spat.agg, cv = evenness)
require(raster)
require(broom)
# create the grid
grid.rast <- raster(extent(c(0,1,0,1)), nrows=resolution, ncols=resolution)
grid.poly <- as(grid.rast, "SpatialPolygons")
#grid.poly@data$id = 1:nrow(grid.poly@data)
# extract the focal cell
cell.poly <- as(grid.poly, "SpatialPolygons")[cell.id]
# prepare the grid and the cell for ggplot
grid.poly.gg = tidy(grid.poly)
cell.poly.gg = tidy(cell.poly)
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_classic() +
geom_polygon(data=grid.poly.gg, aes(y=lat, x=long, group=group),
colour="grey", fill=NA) +
geom_polygon(data=cell.poly.gg, aes(y=lat, x=long, group=group),
colour="black", fill=NA, width=2) +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
spat.plot
}
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
plot.sim.com.grid <- function(S.pool, N.pool, spat.agg, evenness, resolution, cell.id){
set.seed(229356)
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool, sigma=spat.agg, cv = evenness)
require(raster)
require(broom)
# create the grid
grid.rast <- raster(extent(c(0,1,0,1)), nrows=resolution, ncols=resolution)
grid.poly <- as(grid.rast, "SpatialPolygons")
#grid.poly@data$id = 1:nrow(grid.poly@data)
# extract the focal cell
cell.poly <- as(grid.poly, "SpatialPolygons")[cell.id]
# prepare the grid and the cell for ggplot
grid.poly.gg = tidy(grid.poly)
cell.poly.gg = tidy(cell.poly)
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_classic() +
geom_polygon(data=grid.poly.gg, aes(y=lat, x=long, group=group),
colour="grey", fill=NA) +
geom_polygon(data=cell.poly.gg, aes(y=lat, x=long, group=group),
colour="black", fill=NA, size=2) +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
spat.plot
}
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
manipulate(
plot.sim.com(S.pool=slider(10, S.max, step=10),
N.pool=slider(500,1000, step=100),
spat.agg=slider(0.02,1),
evenness=slider(1,3),
S.max=S.max))
plot.sim.com <- function(S.pool, N.pool, spat.agg, evenness, S.max){
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool,
sigma = spat.agg, cv = evenness)
# spatial point pattern plot
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
# species-abundance distribution
SAD <- data.frame(specID = names(table(sim.com$SpecID)),
abundance = as.integer(table(sim.com$SpecID)))
SAD.plot <- ggplot(data=SAD,aes(abundance)) +
geom_histogram(binwidth=10) +
ggtitle("SAD") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size=rel(0.8)))
# species-accumulation-curves
SAC <- data.frame(ind = 1:sum(SAD$abundance), SR=SAC.coleman(SAD$abundance))
SAC.plot <- ggplot(data = SAC, aes(x = ind, y = SR)) +
geom_line() +
ylim(0,S.max) +
xlab("# individuals sampled") +
ylab("Species richness") +
ggtitle("SAC") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
# species-area-relationship
n <- 100
prop.a <- seq(0.05, 0.5, by = 0.05) # size of area samples in proportions of total area
SAR <- data.frame(DivAR(sim.com, prop.A=prop.a, nsamples = n)) # Vector with mean and standard deviation of the following diversity indices: (1)
SAR.plot <- ggplot(data = SAR, aes(x = propArea, y = meanSpec)) +
geom_line() +
geom_ribbon(aes(ymin = meanSpec-1.96*sdSpec,
ymax = meanSpec+1.96*sdSpec), alpha=0.3) +
ylim(0, S.max) +
xlab("sampled area/total area") +
ylab("Species richness") +
ggtitle("SAR") +
labs(linetype = '') +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
lay <- rbind(c(1,2,3),
c(4,4,4))
grid.arrange(SAD.plot, SAC.plot, SAR.plot, spat.plot,
ncol=3, nrow=2, heights=c(1, 3),
layout_matrix = lay)
}
# ------------------------------------------------------------------------------
S.max <- 50
manipulate(
plot.sim.com(S.pool=slider(10, S.max, step=10),
N.pool=slider(500,1000, step=100),
spat.agg=slider(0.02,1),
evenness=slider(1,3),
S.max=S.max))
plot.sim.com <- function(S.pool, N.pool, spat.agg, evenness, S.max){
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool,
sigma = spat.agg, cv = evenness)
# spatial point pattern plot
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
# species-abundance distribution
SAD <- data.frame(specID = names(table(sim.com$SpecID)),
abundance = as.integer(table(sim.com$SpecID)))
SAD.plot <- ggplot(data=SAD,aes(abundance)) +
geom_histogram(binwidth=10) +
ggtitle("SAD") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size=rel(0.8)))
# species-accumulation-curves
SAC <- data.frame(ind = 1:sum(SAD$abundance), SR=SAC.coleman(SAD$abundance))
SAC.plot <- ggplot(data = SAC, aes(x = ind, y = SR)) +
geom_line() +
ylim(0,S.max) +
xlab("# individuals sampled") +
ylab("Species richness") +
ggtitle("SAC") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
# species-area-relationship
n <- 100
prop.a <- seq(0.05, 0.5, by = 0.05) # size of area samples in proportions of total area
SAR <- data.frame(DivAR(sim.com, prop.A=prop.a, nsamples = n)) # Vector with mean and standard deviation of the following diversity indices: (1)
SAR.plot <- ggplot(data = SAR, aes(x = propArea, y = meanSpec)) +
geom_line() +
geom_ribbon(aes(ymin = meanSpec-1.96*sdSpec,
ymax = meanSpec+1.96*sdSpec), alpha=0.3) +
ylim(0, S.max) +
xlab("sampled area/total area") +
ylab("Species richness") +
ggtitle("SAR") +
labs(linetype = '') +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
lay <- rbind(c(1,2,3),
c(4,4,4))
grid.arrange(SAD.plot, SAC.plot, SAR.plot, spat.plot,
ncol=3, nrow=2, heights=c(1, 3),
layout_matrix = lay)
}
# ------------------------------------------------------------------------------
S.max <- 50
manipulate(
plot.sim.com(S.pool = slider(10, S.max, step=10),
N.pool = slider(500,1000, step=100),
spat.agg = slider(0.02,1),
evenness = slider(1,3),
S.max = S.max))
############################################################################
### 0. Load and install all needed libraries
############################################################################
needed_libs <- c("devtools", # download from github
"MoBspatial", # simulation of species communities
#                 "iNEXT", # computes diversity estimates for rarefied and extrapolated samples
"ggplot2",
"gridExtra", # for multiple plots using grid.arrange()
"manipulate"
#                 "reshape2", # melt lists and dataframes
#                 "vegan" # for diversity indices
)
usePackage <- function(p) {
if(p == "MoBspatial")    install_github('MoBiodiv/MoBspatial')
#  if(p=="iNEXT")   install_github('JohnsonHsieh/iNEXT')
if (!is.element(p, installed.packages()[,1]))    install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
sapply(needed_libs,usePackage)
rm(needed_libs, usePackage)
plot.sim.com <- function(S.pool, N.pool, spat.agg, evenness, S.max){
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool,
sigma = spat.agg, cv = evenness)
# spatial point pattern plot
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
# species-abundance distribution
SAD <- data.frame(specID = names(table(sim.com$SpecID)),
abundance = as.integer(table(sim.com$SpecID)))
SAD.plot <- ggplot(data=SAD,aes(abundance)) +
geom_histogram(binwidth=10) +
ggtitle("SAD") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size=rel(0.8)))
# species-accumulation-curves
SAC <- data.frame(ind = 1:sum(SAD$abundance), SR=SAC.coleman(SAD$abundance))
SAC.plot <- ggplot(data = SAC, aes(x = ind, y = SR)) +
geom_line() +
ylim(0,S.max) +
xlab("# individuals sampled") +
ylab("Species richness") +
ggtitle("SAC") +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
# species-area-relationship
n <- 100
prop.a <- seq(0.05, 0.5, by = 0.05) # size of area samples in proportions of total area
SAR <- data.frame(DivAR(sim.com, prop.A=prop.a, nsamples = n)) # Vector with mean and standard deviation of the following diversity indices: (1)
SAR.plot <- ggplot(data = SAR, aes(x = propArea, y = meanSpec)) +
geom_line() +
geom_ribbon(aes(ymin = meanSpec-1.96*sdSpec,
ymax = meanSpec+1.96*sdSpec), alpha=0.3) +
ylim(0, S.max) +
xlab("sampled area/total area") +
ylab("Species richness") +
ggtitle("SAR") +
labs(linetype = '') +
theme_bw() +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6)),
legend.position = "bottom",
plot.title = element_text(size = rel(0.8)))
lay <- rbind(c(1,2,3),
c(4,4,4))
grid.arrange(SAD.plot, SAC.plot, SAR.plot, spat.plot,
ncol=3, nrow=2, heights=c(1, 3),
layout_matrix = lay)
}
# ------------------------------------------------------------------------------
S.max <- 50
manipulate(
plot.sim.com(S.pool = slider(10, S.max, step=10),
N.pool = slider(500,1000, step=100),
spat.agg = slider(0.02,1),
evenness = slider(1,3),
S.max = S.max))
manipulate(plot.sim.com(S.pool = slider(10, S.max, step=10),
N.pool = slider(500,1000, step=100),
spat.agg = slider(0.02,1),
evenness = slider(1,3),
S.max = S.max))
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool,
sigma = spat.agg, cv = evenness)
manipulate(
plot.sim.com(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness, S.max=S.max),
S = slider(10, S.max, step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1))
manipulate(
plot.sim.com(slider(10, S.max, step=10), N.pool=N, spat.agg=spat.agg, evenness=evenness, S.max=S.max),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1))
S.max <- 50
manipulate(
plot.sim.com(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness, S.max=S.max),
S = slider(10, S.max, step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1))
plot.sim.com.grid <- function(S.pool, N.pool, spat.agg, evenness, resolution, cell.id){
set.seed(229356)
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool, sigma=spat.agg, cv = evenness)
require(raster)
require(broom)
# create the grid
grid.rast <- raster(extent(c(0,1,0,1)), nrows=resolution, ncols=resolution)
grid.poly <- as(grid.rast, "SpatialPolygons")
#grid.poly@data$id = 1:nrow(grid.poly@data)
# extract the focal cell
cell.poly <- as(grid.poly, "SpatialPolygons")[cell.id]
# prepare the grid and the cell for ggplot
grid.poly.gg = tidy(grid.poly)
cell.poly.gg = tidy(cell.poly)
SAD <- data.frame(specID = names(table(sim.com$SpecID)),
abundance = as.integer(table(sim.com$SpecID)))
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_classic() +
geom_polygon(data=grid.poly.gg, aes(y=lat, x=long, group=group),
colour="grey", fill=NA) +
geom_polygon(data=cell.poly.gg, aes(y=lat, x=long, group=group),
colour="black", fill=NA, size=2) +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
spat.plot
return(SAD)
}
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
# comment
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
plot.sim.com.grid <- function(S.pool, N.pool, spat.agg, evenness, resolution, cell.id){
set.seed(229356)
sim.com <- Sim.Thomas.Community(S = S.pool, N = N.pool, sigma=spat.agg, cv = evenness)
require(raster)
require(broom)
# create the grid
grid.rast <- raster(extent(c(0,1,0,1)), nrows=resolution, ncols=resolution)
grid.poly <- as(grid.rast, "SpatialPolygons")
#grid.poly@data$id = 1:nrow(grid.poly@data)
# extract the focal cell
cell.poly <- as(grid.poly, "SpatialPolygons")[cell.id]
# prepare the grid and the cell for ggplot
grid.poly.gg = tidy(grid.poly)
cell.poly.gg = tidy(cell.poly)
SAD <- data.frame(specID = names(table(sim.com$SpecID)),
abundance = as.integer(table(sim.com$SpecID)))
spat.plot <- ggplot(sim.com, aes(X,Y, color=SpecID)) +
geom_point() +
guides(color="none") +
xlab("") +
ylab("") +
theme_classic() +
geom_polygon(data=grid.poly.gg, aes(y=lat, x=long, group=group),
colour="grey", fill=NA) +
geom_polygon(data=cell.poly.gg, aes(y=lat, x=long, group=group),
colour="black", fill=NA, size=2) +
theme(axis.text = element_text(size = rel(0.6)),
axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.text=element_text(size = rel(0.6)),
legend.position="bottom",
plot.title=element_text(size=rel(0.8)))
spat.plot
}
plot.sim.com.grid(S.pool=10, N.pool=500, spat.agg=0.02, evenness=1, resolution=10, cell.id=1)
# comment
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
X11()
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
manipulate(
plot.sim.com.grid(S.pool=S, N.pool=N, spat.agg=spat.agg, evenness=evenness,
resolution = res, cell.id=cell),
S = slider(10,50,step=10),
N = slider(500,1000,step=100),
evenness = slider(1,3),
spat.agg = slider(0.02,1),
res = slider(2, 20),
cell = slider(1, 100))
